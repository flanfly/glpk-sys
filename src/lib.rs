#![allow(non_camel_case_types)]
/* automatically generated by rust-bindgen */
extern crate libc;

pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type ptrdiff_t = ::libc::c_long;
pub type size_t = ::libc::c_ulong;
pub type wchar_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub _opaque_prob: [::libc::c_double; 100usize],
}
impl ::std::clone::Clone for Struct_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type glp_prob = Struct_Unnamed1;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub msg_lev: ::libc::c_int,
    pub _type: ::libc::c_int,
    pub lu_size: ::libc::c_int,
    pub piv_tol: ::libc::c_double,
    pub piv_lim: ::libc::c_int,
    pub suhl: ::libc::c_int,
    pub eps_tol: ::libc::c_double,
    pub max_gro: ::libc::c_double,
    pub nfs_max: ::libc::c_int,
    pub upd_tol: ::libc::c_double,
    pub nrs_max: ::libc::c_int,
    pub rs_size: ::libc::c_int,
    pub foo_bar: [::libc::c_double; 38usize],
}
impl ::std::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type glp_bfcp = Struct_Unnamed2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed3 {
    pub msg_lev: ::libc::c_int,
    pub meth: ::libc::c_int,
    pub pricing: ::libc::c_int,
    pub r_test: ::libc::c_int,
    pub tol_bnd: ::libc::c_double,
    pub tol_dj: ::libc::c_double,
    pub tol_piv: ::libc::c_double,
    pub obj_ll: ::libc::c_double,
    pub obj_ul: ::libc::c_double,
    pub it_lim: ::libc::c_int,
    pub tm_lim: ::libc::c_int,
    pub out_frq: ::libc::c_int,
    pub out_dly: ::libc::c_int,
    pub presolve: ::libc::c_int,
    pub foo_bar: [::libc::c_double; 36usize],
}
impl ::std::clone::Clone for Struct_Unnamed3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type glp_smcp = Struct_Unnamed3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed4 {
    pub msg_lev: ::libc::c_int,
    pub ord_alg: ::libc::c_int,
    pub foo_bar: [::libc::c_double; 48usize],
}
impl ::std::clone::Clone for Struct_Unnamed4 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type glp_iptcp = Struct_Unnamed4;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed5 {
    pub _opaque_tree: [::libc::c_double; 100usize],
}
impl ::std::clone::Clone for Struct_Unnamed5 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type glp_tree = Struct_Unnamed5;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed6 {
    pub msg_lev: ::libc::c_int,
    pub br_tech: ::libc::c_int,
    pub bt_tech: ::libc::c_int,
    pub tol_int: ::libc::c_double,
    pub tol_obj: ::libc::c_double,
    pub tm_lim: ::libc::c_int,
    pub out_frq: ::libc::c_int,
    pub out_dly: ::libc::c_int,
    pub cb_func: ::std::option::Option<extern "C" fn(T: *mut glp_tree,
                                                     info:
                                                         *mut ::libc::c_void)
                                           -> ()>,
    pub cb_info: *mut ::libc::c_void,
    pub cb_size: ::libc::c_int,
    pub pp_tech: ::libc::c_int,
    pub mip_gap: ::libc::c_double,
    pub mir_cuts: ::libc::c_int,
    pub gmi_cuts: ::libc::c_int,
    pub cov_cuts: ::libc::c_int,
    pub clq_cuts: ::libc::c_int,
    pub presolve: ::libc::c_int,
    pub binarize: ::libc::c_int,
    pub fp_heur: ::libc::c_int,
    pub alien: ::libc::c_int,
    pub foo_bar: [::libc::c_double; 29usize],
}
impl ::std::clone::Clone for Struct_Unnamed6 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type glp_iocp = Struct_Unnamed6;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed7 {
    pub level: ::libc::c_int,
    pub origin: ::libc::c_int,
    pub klass: ::libc::c_int,
    pub foo_bar: [::libc::c_double; 7usize],
}
impl ::std::clone::Clone for Struct_Unnamed7 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed7 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type glp_attr = Struct_Unnamed7;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed8 {
    pub blank: ::libc::c_int,
    pub obj_name: *mut ::libc::c_char,
    pub tol_mps: ::libc::c_double,
    pub foo_bar: [::libc::c_double; 17usize],
}
impl ::std::clone::Clone for Struct_Unnamed8 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed8 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type glp_mpscp = Struct_Unnamed8;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed9 {
    pub foo_bar: [::libc::c_double; 20usize],
}
impl ::std::clone::Clone for Struct_Unnamed9 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed9 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type glp_cpxcp = Struct_Unnamed9;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed10 {
    pub _opaque_tran: [::libc::c_double; 100usize],
}
impl ::std::clone::Clone for Struct_Unnamed10 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed10 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type glp_tran = Struct_Unnamed10;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed11 {
    pub lo: ::libc::c_int,
    pub hi: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed11 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed11 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type glp_long = Struct_Unnamed11;
pub type _glp_error =
    ::std::option::Option<extern "C" fn(fmt: *const ::libc::c_char, ...)
                              -> ()>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed12 {
    pub _opaque_data: [::libc::c_double; 100usize],
}
impl ::std::clone::Clone for Struct_Unnamed12 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed12 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type glp_data = Struct_Unnamed12;
pub type glp_graph = Struct__glp_graph;
pub type glp_vertex = Struct__glp_vertex;
pub type glp_arc = Struct__glp_arc;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__glp_graph {
    pub pool: *mut ::libc::c_void,
    pub name: *mut ::libc::c_char,
    pub nv_max: ::libc::c_int,
    pub nv: ::libc::c_int,
    pub na: ::libc::c_int,
    pub v: *mut *mut glp_vertex,
    pub index: *mut ::libc::c_void,
    pub v_size: ::libc::c_int,
    pub a_size: ::libc::c_int,
}
impl ::std::clone::Clone for Struct__glp_graph {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__glp_graph {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__glp_vertex {
    pub i: ::libc::c_int,
    pub name: *mut ::libc::c_char,
    pub entry: *mut ::libc::c_void,
    pub data: *mut ::libc::c_void,
    pub temp: *mut ::libc::c_void,
    pub _in: *mut glp_arc,
    pub out: *mut glp_arc,
}
impl ::std::clone::Clone for Struct__glp_vertex {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__glp_vertex {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__glp_arc {
    pub tail: *mut glp_vertex,
    pub head: *mut glp_vertex,
    pub data: *mut ::libc::c_void,
    pub temp: *mut ::libc::c_void,
    pub t_prev: *mut glp_arc,
    pub t_next: *mut glp_arc,
    pub h_prev: *mut glp_arc,
    pub h_next: *mut glp_arc,
}
impl ::std::clone::Clone for Struct__glp_arc {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__glp_arc {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed13 {
    pub pe_ae_max: ::libc::c_double,
    pub pe_ae_row: ::libc::c_int,
    pub pe_re_max: ::libc::c_double,
    pub pe_re_row: ::libc::c_int,
    pub pe_quality: ::libc::c_int,
    pub pb_ae_max: ::libc::c_double,
    pub pb_ae_ind: ::libc::c_int,
    pub pb_re_max: ::libc::c_double,
    pub pb_re_ind: ::libc::c_int,
    pub pb_quality: ::libc::c_int,
    pub de_ae_max: ::libc::c_double,
    pub de_ae_col: ::libc::c_int,
    pub de_re_max: ::libc::c_double,
    pub de_re_col: ::libc::c_int,
    pub de_quality: ::libc::c_int,
    pub db_ae_max: ::libc::c_double,
    pub db_ae_ind: ::libc::c_int,
    pub db_re_max: ::libc::c_double,
    pub db_re_ind: ::libc::c_int,
    pub db_quality: ::libc::c_int,
    pub cs_ae_max: ::libc::c_double,
    pub cs_ae_ind: ::libc::c_int,
    pub cs_re_max: ::libc::c_double,
    pub cs_re_ind: ::libc::c_int,
    pub cs_quality: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed13 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed13 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type LPXKKT = Struct_Unnamed13;
pub type __builtin_va_list = [__va_list_tag; 1usize];
pub type __va_list_tag = Struct___va_list_tag;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___va_list_tag {
    pub gp_offset: ::libc::c_uint,
    pub fp_offset: ::libc::c_uint,
    pub overflow_arg_area: *mut ::libc::c_void,
    pub reg_save_area: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct___va_list_tag {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___va_list_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub fn glp_create_prob() -> *mut glp_prob;
    pub fn glp_set_prob_name(P: *mut glp_prob, name: *const ::libc::c_char)
     -> ();
    pub fn glp_set_obj_name(P: *mut glp_prob, name: *const ::libc::c_char)
     -> ();
    pub fn glp_set_obj_dir(P: *mut glp_prob, dir: ::libc::c_int) -> ();
    pub fn glp_add_rows(P: *mut glp_prob, nrs: ::libc::c_int)
     -> ::libc::c_int;
    pub fn glp_add_cols(P: *mut glp_prob, ncs: ::libc::c_int)
     -> ::libc::c_int;
    pub fn glp_set_row_name(P: *mut glp_prob, i: ::libc::c_int,
                            name: *const ::libc::c_char) -> ();
    pub fn glp_set_col_name(P: *mut glp_prob, j: ::libc::c_int,
                            name: *const ::libc::c_char) -> ();
    pub fn glp_set_row_bnds(P: *mut glp_prob, i: ::libc::c_int,
                            _type: ::libc::c_int, lb: ::libc::c_double,
                            ub: ::libc::c_double) -> ();
    pub fn glp_set_col_bnds(P: *mut glp_prob, j: ::libc::c_int,
                            _type: ::libc::c_int, lb: ::libc::c_double,
                            ub: ::libc::c_double) -> ();
    pub fn glp_set_obj_coef(P: *mut glp_prob, j: ::libc::c_int,
                            coef: ::libc::c_double) -> ();
    pub fn glp_set_mat_row(P: *mut glp_prob, i: ::libc::c_int,
                           len: ::libc::c_int, ind: *const ::libc::c_int,
                           val: *const ::libc::c_double) -> ();
    pub fn glp_set_mat_col(P: *mut glp_prob, j: ::libc::c_int,
                           len: ::libc::c_int, ind: *const ::libc::c_int,
                           val: *const ::libc::c_double) -> ();
    pub fn glp_load_matrix(P: *mut glp_prob, ne: ::libc::c_int,
                           ia: *const ::libc::c_int, ja: *const ::libc::c_int,
                           ar: *const ::libc::c_double) -> ();
    pub fn glp_check_dup(m: ::libc::c_int, n: ::libc::c_int,
                         ne: ::libc::c_int, ia: *const ::libc::c_int,
                         ja: *const ::libc::c_int) -> ::libc::c_int;
    pub fn glp_sort_matrix(P: *mut glp_prob) -> ();
    pub fn glp_del_rows(P: *mut glp_prob, nrs: ::libc::c_int,
                        num: *const ::libc::c_int) -> ();
    pub fn glp_del_cols(P: *mut glp_prob, ncs: ::libc::c_int,
                        num: *const ::libc::c_int) -> ();
    pub fn glp_copy_prob(dest: *mut glp_prob, prob: *mut glp_prob,
                         names: ::libc::c_int) -> ();
    pub fn glp_erase_prob(P: *mut glp_prob) -> ();
    pub fn glp_delete_prob(P: *mut glp_prob) -> ();
    pub fn glp_get_prob_name(P: *mut glp_prob) -> *const ::libc::c_char;
    pub fn glp_get_obj_name(P: *mut glp_prob) -> *const ::libc::c_char;
    pub fn glp_get_obj_dir(P: *mut glp_prob) -> ::libc::c_int;
    pub fn glp_get_num_rows(P: *mut glp_prob) -> ::libc::c_int;
    pub fn glp_get_num_cols(P: *mut glp_prob) -> ::libc::c_int;
    pub fn glp_get_row_name(P: *mut glp_prob, i: ::libc::c_int)
     -> *const ::libc::c_char;
    pub fn glp_get_col_name(P: *mut glp_prob, j: ::libc::c_int)
     -> *const ::libc::c_char;
    pub fn glp_get_row_type(P: *mut glp_prob, i: ::libc::c_int)
     -> ::libc::c_int;
    pub fn glp_get_row_lb(P: *mut glp_prob, i: ::libc::c_int)
     -> ::libc::c_double;
    pub fn glp_get_row_ub(P: *mut glp_prob, i: ::libc::c_int)
     -> ::libc::c_double;
    pub fn glp_get_col_type(P: *mut glp_prob, j: ::libc::c_int)
     -> ::libc::c_int;
    pub fn glp_get_col_lb(P: *mut glp_prob, j: ::libc::c_int)
     -> ::libc::c_double;
    pub fn glp_get_col_ub(P: *mut glp_prob, j: ::libc::c_int)
     -> ::libc::c_double;
    pub fn glp_get_obj_coef(P: *mut glp_prob, j: ::libc::c_int)
     -> ::libc::c_double;
    pub fn glp_get_num_nz(P: *mut glp_prob) -> ::libc::c_int;
    pub fn glp_get_mat_row(P: *mut glp_prob, i: ::libc::c_int,
                           ind: *mut ::libc::c_int,
                           val: *mut ::libc::c_double) -> ::libc::c_int;
    pub fn glp_get_mat_col(P: *mut glp_prob, j: ::libc::c_int,
                           ind: *mut ::libc::c_int,
                           val: *mut ::libc::c_double) -> ::libc::c_int;
    pub fn glp_create_index(P: *mut glp_prob) -> ();
    pub fn glp_find_row(P: *mut glp_prob, name: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn glp_find_col(P: *mut glp_prob, name: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn glp_delete_index(P: *mut glp_prob) -> ();
    pub fn glp_set_rii(P: *mut glp_prob, i: ::libc::c_int,
                       rii: ::libc::c_double) -> ();
    pub fn glp_set_sjj(P: *mut glp_prob, j: ::libc::c_int,
                       sjj: ::libc::c_double) -> ();
    pub fn glp_get_rii(P: *mut glp_prob, i: ::libc::c_int)
     -> ::libc::c_double;
    pub fn glp_get_sjj(P: *mut glp_prob, j: ::libc::c_int)
     -> ::libc::c_double;
    pub fn glp_scale_prob(P: *mut glp_prob, flags: ::libc::c_int) -> ();
    pub fn glp_unscale_prob(P: *mut glp_prob) -> ();
    pub fn glp_set_row_stat(P: *mut glp_prob, i: ::libc::c_int,
                            stat: ::libc::c_int) -> ();
    pub fn glp_set_col_stat(P: *mut glp_prob, j: ::libc::c_int,
                            stat: ::libc::c_int) -> ();
    pub fn glp_std_basis(P: *mut glp_prob) -> ();
    pub fn glp_adv_basis(P: *mut glp_prob, flags: ::libc::c_int) -> ();
    pub fn glp_cpx_basis(P: *mut glp_prob) -> ();
    pub fn glp_simplex(P: *mut glp_prob, parm: *const glp_smcp)
     -> ::libc::c_int;
    pub fn glp_exact(P: *mut glp_prob, parm: *const glp_smcp)
     -> ::libc::c_int;
    pub fn glp_init_smcp(parm: *mut glp_smcp) -> ();
    pub fn glp_get_status(P: *mut glp_prob) -> ::libc::c_int;
    pub fn glp_get_prim_stat(P: *mut glp_prob) -> ::libc::c_int;
    pub fn glp_get_dual_stat(P: *mut glp_prob) -> ::libc::c_int;
    pub fn glp_get_obj_val(P: *mut glp_prob) -> ::libc::c_double;
    pub fn glp_get_row_stat(P: *mut glp_prob, i: ::libc::c_int)
     -> ::libc::c_int;
    pub fn glp_get_row_prim(P: *mut glp_prob, i: ::libc::c_int)
     -> ::libc::c_double;
    pub fn glp_get_row_dual(P: *mut glp_prob, i: ::libc::c_int)
     -> ::libc::c_double;
    pub fn glp_get_col_stat(P: *mut glp_prob, j: ::libc::c_int)
     -> ::libc::c_int;
    pub fn glp_get_col_prim(P: *mut glp_prob, j: ::libc::c_int)
     -> ::libc::c_double;
    pub fn glp_get_col_dual(P: *mut glp_prob, j: ::libc::c_int)
     -> ::libc::c_double;
    pub fn glp_get_unbnd_ray(P: *mut glp_prob) -> ::libc::c_int;
    pub fn glp_interior(P: *mut glp_prob, parm: *const glp_iptcp)
     -> ::libc::c_int;
    pub fn glp_init_iptcp(parm: *mut glp_iptcp) -> ();
    pub fn glp_ipt_status(P: *mut glp_prob) -> ::libc::c_int;
    pub fn glp_ipt_obj_val(P: *mut glp_prob) -> ::libc::c_double;
    pub fn glp_ipt_row_prim(P: *mut glp_prob, i: ::libc::c_int)
     -> ::libc::c_double;
    pub fn glp_ipt_row_dual(P: *mut glp_prob, i: ::libc::c_int)
     -> ::libc::c_double;
    pub fn glp_ipt_col_prim(P: *mut glp_prob, j: ::libc::c_int)
     -> ::libc::c_double;
    pub fn glp_ipt_col_dual(P: *mut glp_prob, j: ::libc::c_int)
     -> ::libc::c_double;
    pub fn glp_set_col_kind(P: *mut glp_prob, j: ::libc::c_int,
                            kind: ::libc::c_int) -> ();
    pub fn glp_get_col_kind(P: *mut glp_prob, j: ::libc::c_int)
     -> ::libc::c_int;
    pub fn glp_get_num_int(P: *mut glp_prob) -> ::libc::c_int;
    pub fn glp_get_num_bin(P: *mut glp_prob) -> ::libc::c_int;
    pub fn glp_intopt(P: *mut glp_prob, parm: *const glp_iocp)
     -> ::libc::c_int;
    pub fn glp_init_iocp(parm: *mut glp_iocp) -> ();
    pub fn glp_mip_status(P: *mut glp_prob) -> ::libc::c_int;
    pub fn glp_mip_obj_val(P: *mut glp_prob) -> ::libc::c_double;
    pub fn glp_mip_row_val(P: *mut glp_prob, i: ::libc::c_int)
     -> ::libc::c_double;
    pub fn glp_mip_col_val(P: *mut glp_prob, j: ::libc::c_int)
     -> ::libc::c_double;
    pub fn glp_print_sol(P: *mut glp_prob, fname: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn glp_read_sol(P: *mut glp_prob, fname: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn glp_write_sol(P: *mut glp_prob, fname: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn glp_print_ranges(P: *mut glp_prob, len: ::libc::c_int,
                            list: *const ::libc::c_int, flags: ::libc::c_int,
                            fname: *const ::libc::c_char) -> ::libc::c_int;
    pub fn glp_print_ipt(P: *mut glp_prob, fname: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn glp_read_ipt(P: *mut glp_prob, fname: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn glp_write_ipt(P: *mut glp_prob, fname: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn glp_print_mip(P: *mut glp_prob, fname: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn glp_read_mip(P: *mut glp_prob, fname: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn glp_write_mip(P: *mut glp_prob, fname: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn glp_bf_exists(P: *mut glp_prob) -> ::libc::c_int;
    pub fn glp_factorize(P: *mut glp_prob) -> ::libc::c_int;
    pub fn glp_bf_updated(P: *mut glp_prob) -> ::libc::c_int;
    pub fn glp_get_bfcp(P: *mut glp_prob, parm: *mut glp_bfcp) -> ();
    pub fn glp_set_bfcp(P: *mut glp_prob, parm: *const glp_bfcp) -> ();
    pub fn glp_get_bhead(P: *mut glp_prob, k: ::libc::c_int) -> ::libc::c_int;
    pub fn glp_get_row_bind(P: *mut glp_prob, i: ::libc::c_int)
     -> ::libc::c_int;
    pub fn glp_get_col_bind(P: *mut glp_prob, j: ::libc::c_int)
     -> ::libc::c_int;
    pub fn glp_ftran(P: *mut glp_prob, x: *mut ::libc::c_double) -> ();
    pub fn glp_btran(P: *mut glp_prob, x: *mut ::libc::c_double) -> ();
    pub fn glp_warm_up(P: *mut glp_prob) -> ::libc::c_int;
    pub fn glp_eval_tab_row(P: *mut glp_prob, k: ::libc::c_int,
                            ind: *mut ::libc::c_int,
                            val: *mut ::libc::c_double) -> ::libc::c_int;
    pub fn glp_eval_tab_col(P: *mut glp_prob, k: ::libc::c_int,
                            ind: *mut ::libc::c_int,
                            val: *mut ::libc::c_double) -> ::libc::c_int;
    pub fn glp_transform_row(P: *mut glp_prob, len: ::libc::c_int,
                             ind: *mut ::libc::c_int,
                             val: *mut ::libc::c_double) -> ::libc::c_int;
    pub fn glp_transform_col(P: *mut glp_prob, len: ::libc::c_int,
                             ind: *mut ::libc::c_int,
                             val: *mut ::libc::c_double) -> ::libc::c_int;
    pub fn glp_prim_rtest(P: *mut glp_prob, len: ::libc::c_int,
                          ind: *const ::libc::c_int,
                          val: *const ::libc::c_double, dir: ::libc::c_int,
                          eps: ::libc::c_double) -> ::libc::c_int;
    pub fn glp_dual_rtest(P: *mut glp_prob, len: ::libc::c_int,
                          ind: *const ::libc::c_int,
                          val: *const ::libc::c_double, dir: ::libc::c_int,
                          eps: ::libc::c_double) -> ::libc::c_int;
    pub fn glp_analyze_bound(P: *mut glp_prob, k: ::libc::c_int,
                             value1: *mut ::libc::c_double,
                             var1: *mut ::libc::c_int,
                             value2: *mut ::libc::c_double,
                             var2: *mut ::libc::c_int) -> ();
    pub fn glp_analyze_coef(P: *mut glp_prob, k: ::libc::c_int,
                            coef1: *mut ::libc::c_double,
                            var1: *mut ::libc::c_int,
                            value1: *mut ::libc::c_double,
                            coef2: *mut ::libc::c_double,
                            var2: *mut ::libc::c_int,
                            value2: *mut ::libc::c_double) -> ();
    pub fn glp_ios_reason(T: *mut glp_tree) -> ::libc::c_int;
    pub fn glp_ios_get_prob(T: *mut glp_tree) -> *mut glp_prob;
    pub fn glp_ios_tree_size(T: *mut glp_tree, a_cnt: *mut ::libc::c_int,
                             n_cnt: *mut ::libc::c_int,
                             t_cnt: *mut ::libc::c_int) -> ();
    pub fn glp_ios_curr_node(T: *mut glp_tree) -> ::libc::c_int;
    pub fn glp_ios_next_node(T: *mut glp_tree, p: ::libc::c_int)
     -> ::libc::c_int;
    pub fn glp_ios_prev_node(T: *mut glp_tree, p: ::libc::c_int)
     -> ::libc::c_int;
    pub fn glp_ios_up_node(T: *mut glp_tree, p: ::libc::c_int)
     -> ::libc::c_int;
    pub fn glp_ios_node_level(T: *mut glp_tree, p: ::libc::c_int)
     -> ::libc::c_int;
    pub fn glp_ios_node_bound(T: *mut glp_tree, p: ::libc::c_int)
     -> ::libc::c_double;
    pub fn glp_ios_best_node(T: *mut glp_tree) -> ::libc::c_int;
    pub fn glp_ios_mip_gap(T: *mut glp_tree) -> ::libc::c_double;
    pub fn glp_ios_node_data(T: *mut glp_tree, p: ::libc::c_int)
     -> *mut ::libc::c_void;
    pub fn glp_ios_row_attr(T: *mut glp_tree, i: ::libc::c_int,
                            attr: *mut glp_attr) -> ();
    pub fn glp_ios_pool_size(T: *mut glp_tree) -> ::libc::c_int;
    pub fn glp_ios_add_row(T: *mut glp_tree, name: *const ::libc::c_char,
                           klass: ::libc::c_int, flags: ::libc::c_int,
                           len: ::libc::c_int, ind: *const ::libc::c_int,
                           val: *const ::libc::c_double, _type: ::libc::c_int,
                           rhs: ::libc::c_double) -> ::libc::c_int;
    pub fn glp_ios_del_row(T: *mut glp_tree, i: ::libc::c_int) -> ();
    pub fn glp_ios_clear_pool(T: *mut glp_tree) -> ();
    pub fn glp_ios_can_branch(T: *mut glp_tree, j: ::libc::c_int)
     -> ::libc::c_int;
    pub fn glp_ios_branch_upon(T: *mut glp_tree, j: ::libc::c_int,
                               sel: ::libc::c_int) -> ();
    pub fn glp_ios_select_node(T: *mut glp_tree, p: ::libc::c_int) -> ();
    pub fn glp_ios_heur_sol(T: *mut glp_tree, x: *const ::libc::c_double)
     -> ::libc::c_int;
    pub fn glp_ios_terminate(T: *mut glp_tree) -> ();
    pub fn glp_init_mpscp(parm: *mut glp_mpscp) -> ();
    pub fn glp_read_mps(P: *mut glp_prob, fmt: ::libc::c_int,
                        parm: *const glp_mpscp, fname: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn glp_write_mps(P: *mut glp_prob, fmt: ::libc::c_int,
                         parm: *const glp_mpscp, fname: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn glp_init_cpxcp(parm: *mut glp_cpxcp) -> ();
    pub fn glp_read_lp(P: *mut glp_prob, parm: *const glp_cpxcp,
                       fname: *const ::libc::c_char) -> ::libc::c_int;
    pub fn glp_write_lp(P: *mut glp_prob, parm: *const glp_cpxcp,
                        fname: *const ::libc::c_char) -> ::libc::c_int;
    pub fn glp_read_prob(P: *mut glp_prob, flags: ::libc::c_int,
                         fname: *const ::libc::c_char) -> ::libc::c_int;
    pub fn glp_write_prob(P: *mut glp_prob, flags: ::libc::c_int,
                          fname: *const ::libc::c_char) -> ::libc::c_int;
    pub fn glp_mpl_alloc_wksp() -> *mut glp_tran;
    pub fn glp_mpl_read_model(tran: *mut glp_tran,
                              fname: *const ::libc::c_char,
                              skip: ::libc::c_int) -> ::libc::c_int;
    pub fn glp_mpl_read_data(tran: *mut glp_tran,
                             fname: *const ::libc::c_char) -> ::libc::c_int;
    pub fn glp_mpl_generate(tran: *mut glp_tran, fname: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn glp_mpl_build_prob(tran: *mut glp_tran, prob: *mut glp_prob) -> ();
    pub fn glp_mpl_postsolve(tran: *mut glp_tran, prob: *mut glp_prob,
                             sol: ::libc::c_int) -> ::libc::c_int;
    pub fn glp_mpl_free_wksp(tran: *mut glp_tran) -> ();
    pub fn glp_main(argc: ::libc::c_int, argv: *mut *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn glp_init_env() -> ::libc::c_int;
    pub fn glp_version() -> *const ::libc::c_char;
    pub fn glp_free_env() -> ::libc::c_int;
    pub fn glp_printf(fmt: *const ::libc::c_char, ...) -> ();
    pub fn glp_vprintf(fmt: *const ::libc::c_char, arg: va_list) -> ();
    pub fn glp_term_out(flag: ::libc::c_int) -> ::libc::c_int;
    pub fn glp_term_hook(func:
                             ::std::option::Option<extern "C" fn(info:
                                                                     *mut ::libc::c_void,
                                                                 s:
                                                                     *const ::libc::c_char)
                                                       -> ::libc::c_int>,
                         info: *mut ::libc::c_void) -> ();
    pub fn glp_open_tee(fname: *const ::libc::c_char) -> ::libc::c_int;
    pub fn glp_close_tee() -> ::libc::c_int;
    pub fn glp_error_(file: *const ::libc::c_char, line: ::libc::c_int)
     -> _glp_error;
    pub fn glp_assert_(expr: *const ::libc::c_char,
                       file: *const ::libc::c_char, line: ::libc::c_int)
     -> ();
    pub fn glp_error_hook(func:
                              ::std::option::Option<extern "C" fn(info:
                                                                      *mut ::libc::c_void)
                                                        -> ()>,
                          info: *mut ::libc::c_void) -> ();
    pub fn glp_malloc(size: ::libc::c_int) -> *mut ::libc::c_void;
    pub fn glp_calloc(n: ::libc::c_int, size: ::libc::c_int)
     -> *mut ::libc::c_void;
    pub fn glp_free(ptr: *mut ::libc::c_void) -> ();
    pub fn glp_mem_limit(limit: ::libc::c_int) -> ();
    pub fn glp_mem_usage(count: *mut ::libc::c_int, cpeak: *mut ::libc::c_int,
                         total: *mut glp_long, tpeak: *mut glp_long) -> ();
    pub fn glp_time() -> glp_long;
    pub fn glp_difftime(t1: glp_long, t0: glp_long) -> ::libc::c_double;
    pub fn glp_sdf_open_file(fname: *const ::libc::c_char) -> *mut glp_data;
    pub fn glp_sdf_set_jump(data: *mut glp_data, jump: *mut ::libc::c_void)
     -> ();
    pub fn glp_sdf_error(data: *mut glp_data, fmt: *const ::libc::c_char, ...)
     -> ();
    pub fn glp_sdf_warning(data: *mut glp_data,
                           fmt: *const ::libc::c_char, ...) -> ();
    pub fn glp_sdf_read_int(data: *mut glp_data) -> ::libc::c_int;
    pub fn glp_sdf_read_num(data: *mut glp_data) -> ::libc::c_double;
    pub fn glp_sdf_read_item(data: *mut glp_data) -> *const ::libc::c_char;
    pub fn glp_sdf_read_text(data: *mut glp_data) -> *const ::libc::c_char;
    pub fn glp_sdf_line(data: *mut glp_data) -> ::libc::c_int;
    pub fn glp_sdf_close_file(data: *mut glp_data) -> ();
    pub fn glp_create_graph(v_size: ::libc::c_int, a_size: ::libc::c_int)
     -> *mut glp_graph;
    pub fn glp_set_graph_name(G: *mut glp_graph, name: *const ::libc::c_char)
     -> ();
    pub fn glp_add_vertices(G: *mut glp_graph, nadd: ::libc::c_int)
     -> ::libc::c_int;
    pub fn glp_set_vertex_name(G: *mut glp_graph, i: ::libc::c_int,
                               name: *const ::libc::c_char) -> ();
    pub fn glp_add_arc(G: *mut glp_graph, i: ::libc::c_int, j: ::libc::c_int)
     -> *mut glp_arc;
    pub fn glp_del_vertices(G: *mut glp_graph, ndel: ::libc::c_int,
                            num: *const ::libc::c_int) -> ();
    pub fn glp_del_arc(G: *mut glp_graph, a: *mut glp_arc) -> ();
    pub fn glp_erase_graph(G: *mut glp_graph, v_size: ::libc::c_int,
                           a_size: ::libc::c_int) -> ();
    pub fn glp_delete_graph(G: *mut glp_graph) -> ();
    pub fn glp_create_v_index(G: *mut glp_graph) -> ();
    pub fn glp_find_vertex(G: *mut glp_graph, name: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn glp_delete_v_index(G: *mut glp_graph) -> ();
    pub fn glp_read_graph(G: *mut glp_graph, fname: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn glp_write_graph(G: *mut glp_graph, fname: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn glp_mincost_lp(P: *mut glp_prob, G: *mut glp_graph,
                          names: ::libc::c_int, v_rhs: ::libc::c_int,
                          a_low: ::libc::c_int, a_cap: ::libc::c_int,
                          a_cost: ::libc::c_int) -> ();
    pub fn glp_mincost_okalg(G: *mut glp_graph, v_rhs: ::libc::c_int,
                             a_low: ::libc::c_int, a_cap: ::libc::c_int,
                             a_cost: ::libc::c_int,
                             sol: *mut ::libc::c_double, a_x: ::libc::c_int,
                             v_pi: ::libc::c_int) -> ::libc::c_int;
    pub fn glp_maxflow_lp(P: *mut glp_prob, G: *mut glp_graph,
                          names: ::libc::c_int, s: ::libc::c_int,
                          t: ::libc::c_int, a_cap: ::libc::c_int) -> ();
    pub fn glp_maxflow_ffalg(G: *mut glp_graph, s: ::libc::c_int,
                             t: ::libc::c_int, a_cap: ::libc::c_int,
                             sol: *mut ::libc::c_double, a_x: ::libc::c_int,
                             v_cut: ::libc::c_int) -> ::libc::c_int;
    pub fn glp_check_asnprob(G: *mut glp_graph, v_set: ::libc::c_int)
     -> ::libc::c_int;
    pub fn glp_asnprob_lp(P: *mut glp_prob, form: ::libc::c_int,
                          G: *mut glp_graph, names: ::libc::c_int,
                          v_set: ::libc::c_int, a_cost: ::libc::c_int)
     -> ::libc::c_int;
    pub fn glp_asnprob_okalg(form: ::libc::c_int, G: *mut glp_graph,
                             v_set: ::libc::c_int, a_cost: ::libc::c_int,
                             sol: *mut ::libc::c_double, a_x: ::libc::c_int)
     -> ::libc::c_int;
    pub fn glp_asnprob_hall(G: *mut glp_graph, v_set: ::libc::c_int,
                            a_x: ::libc::c_int) -> ::libc::c_int;
    pub fn glp_cpp(G: *mut glp_graph, v_t: ::libc::c_int, v_es: ::libc::c_int,
                   v_ls: ::libc::c_int) -> ::libc::c_double;
    pub fn glp_read_mincost(G: *mut glp_graph, v_rhs: ::libc::c_int,
                            a_low: ::libc::c_int, a_cap: ::libc::c_int,
                            a_cost: ::libc::c_int,
                            fname: *const ::libc::c_char) -> ::libc::c_int;
    pub fn glp_write_mincost(G: *mut glp_graph, v_rhs: ::libc::c_int,
                             a_low: ::libc::c_int, a_cap: ::libc::c_int,
                             a_cost: ::libc::c_int,
                             fname: *const ::libc::c_char) -> ::libc::c_int;
    pub fn glp_read_maxflow(G: *mut glp_graph, s: *mut ::libc::c_int,
                            t: *mut ::libc::c_int, a_cap: ::libc::c_int,
                            fname: *const ::libc::c_char) -> ::libc::c_int;
    pub fn glp_write_maxflow(G: *mut glp_graph, s: ::libc::c_int,
                             t: ::libc::c_int, a_cap: ::libc::c_int,
                             fname: *const ::libc::c_char) -> ::libc::c_int;
    pub fn glp_read_asnprob(G: *mut glp_graph, v_set: ::libc::c_int,
                            a_cost: ::libc::c_int,
                            fname: *const ::libc::c_char) -> ::libc::c_int;
    pub fn glp_write_asnprob(G: *mut glp_graph, v_set: ::libc::c_int,
                             a_cost: ::libc::c_int,
                             fname: *const ::libc::c_char) -> ::libc::c_int;
    pub fn glp_read_ccdata(G: *mut glp_graph, v_wgt: ::libc::c_int,
                           fname: *const ::libc::c_char) -> ::libc::c_int;
    pub fn glp_write_ccdata(G: *mut glp_graph, v_wgt: ::libc::c_int,
                            fname: *const ::libc::c_char) -> ::libc::c_int;
    pub fn glp_netgen(G: *mut glp_graph, v_rhs: ::libc::c_int,
                      a_cap: ::libc::c_int, a_cost: ::libc::c_int,
                      parm: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn glp_gridgen(G: *mut glp_graph, v_rhs: ::libc::c_int,
                       a_cap: ::libc::c_int, a_cost: ::libc::c_int,
                       parm: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn glp_rmfgen(G: *mut glp_graph, s: *mut ::libc::c_int,
                      t: *mut ::libc::c_int, a_cap: ::libc::c_int,
                      parm: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn glp_weak_comp(G: *mut glp_graph, v_num: ::libc::c_int)
     -> ::libc::c_int;
    pub fn glp_strong_comp(G: *mut glp_graph, v_num: ::libc::c_int)
     -> ::libc::c_int;
    pub fn glp_top_sort(G: *mut glp_graph, v_num: ::libc::c_int)
     -> ::libc::c_int;
    pub fn glp_wclique_exact(G: *mut glp_graph, v_wgt: ::libc::c_int,
                             sol: *mut ::libc::c_double, v_set: ::libc::c_int)
     -> ::libc::c_int;
    pub fn _glp_lpx_create_prob() -> *mut glp_prob;
    pub fn _glp_lpx_set_prob_name(lp: *mut glp_prob,
                                  name: *const ::libc::c_char) -> ();
    pub fn _glp_lpx_set_obj_name(lp: *mut glp_prob,
                                 name: *const ::libc::c_char) -> ();
    pub fn _glp_lpx_set_obj_dir(lp: *mut glp_prob, dir: ::libc::c_int) -> ();
    pub fn _glp_lpx_add_rows(lp: *mut glp_prob, nrs: ::libc::c_int)
     -> ::libc::c_int;
    pub fn _glp_lpx_add_cols(lp: *mut glp_prob, ncs: ::libc::c_int)
     -> ::libc::c_int;
    pub fn _glp_lpx_set_row_name(lp: *mut glp_prob, i: ::libc::c_int,
                                 name: *const ::libc::c_char) -> ();
    pub fn _glp_lpx_set_col_name(lp: *mut glp_prob, j: ::libc::c_int,
                                 name: *const ::libc::c_char) -> ();
    pub fn _glp_lpx_set_row_bnds(lp: *mut glp_prob, i: ::libc::c_int,
                                 _type: ::libc::c_int, lb: ::libc::c_double,
                                 ub: ::libc::c_double) -> ();
    pub fn _glp_lpx_set_col_bnds(lp: *mut glp_prob, j: ::libc::c_int,
                                 _type: ::libc::c_int, lb: ::libc::c_double,
                                 ub: ::libc::c_double) -> ();
    pub fn _glp_lpx_set_obj_coef(lp: *mut glp_prob, j: ::libc::c_int,
                                 coef: ::libc::c_double) -> ();
    pub fn _glp_lpx_set_mat_row(lp: *mut glp_prob, i: ::libc::c_int,
                                len: ::libc::c_int, ind: *const ::libc::c_int,
                                val: *const ::libc::c_double) -> ();
    pub fn _glp_lpx_set_mat_col(lp: *mut glp_prob, j: ::libc::c_int,
                                len: ::libc::c_int, ind: *const ::libc::c_int,
                                val: *const ::libc::c_double) -> ();
    pub fn _glp_lpx_load_matrix(lp: *mut glp_prob, ne: ::libc::c_int,
                                ia: *const ::libc::c_int,
                                ja: *const ::libc::c_int,
                                ar: *const ::libc::c_double) -> ();
    pub fn _glp_lpx_del_rows(lp: *mut glp_prob, nrs: ::libc::c_int,
                             num: *const ::libc::c_int) -> ();
    pub fn _glp_lpx_del_cols(lp: *mut glp_prob, ncs: ::libc::c_int,
                             num: *const ::libc::c_int) -> ();
    pub fn _glp_lpx_delete_prob(lp: *mut glp_prob) -> ();
    pub fn _glp_lpx_get_prob_name(lp: *mut glp_prob) -> *const ::libc::c_char;
    pub fn _glp_lpx_get_obj_name(lp: *mut glp_prob) -> *const ::libc::c_char;
    pub fn _glp_lpx_get_obj_dir(lp: *mut glp_prob) -> ::libc::c_int;
    pub fn _glp_lpx_get_num_rows(lp: *mut glp_prob) -> ::libc::c_int;
    pub fn _glp_lpx_get_num_cols(lp: *mut glp_prob) -> ::libc::c_int;
    pub fn _glp_lpx_get_row_name(lp: *mut glp_prob, i: ::libc::c_int)
     -> *const ::libc::c_char;
    pub fn _glp_lpx_get_col_name(lp: *mut glp_prob, j: ::libc::c_int)
     -> *const ::libc::c_char;
    pub fn _glp_lpx_get_row_type(lp: *mut glp_prob, i: ::libc::c_int)
     -> ::libc::c_int;
    pub fn _glp_lpx_get_row_lb(lp: *mut glp_prob, i: ::libc::c_int)
     -> ::libc::c_double;
    pub fn _glp_lpx_get_row_ub(lp: *mut glp_prob, i: ::libc::c_int)
     -> ::libc::c_double;
    pub fn _glp_lpx_get_row_bnds(lp: *mut glp_prob, i: ::libc::c_int,
                                 typx: *mut ::libc::c_int,
                                 lb: *mut ::libc::c_double,
                                 ub: *mut ::libc::c_double) -> ();
    pub fn _glp_lpx_get_col_type(lp: *mut glp_prob, j: ::libc::c_int)
     -> ::libc::c_int;
    pub fn _glp_lpx_get_col_lb(lp: *mut glp_prob, j: ::libc::c_int)
     -> ::libc::c_double;
    pub fn _glp_lpx_get_col_ub(lp: *mut glp_prob, j: ::libc::c_int)
     -> ::libc::c_double;
    pub fn _glp_lpx_get_col_bnds(lp: *mut glp_prob, j: ::libc::c_int,
                                 typx: *mut ::libc::c_int,
                                 lb: *mut ::libc::c_double,
                                 ub: *mut ::libc::c_double) -> ();
    pub fn _glp_lpx_get_obj_coef(lp: *mut glp_prob, j: ::libc::c_int)
     -> ::libc::c_double;
    pub fn _glp_lpx_get_num_nz(lp: *mut glp_prob) -> ::libc::c_int;
    pub fn _glp_lpx_get_mat_row(lp: *mut glp_prob, i: ::libc::c_int,
                                ind: *mut ::libc::c_int,
                                val: *mut ::libc::c_double) -> ::libc::c_int;
    pub fn _glp_lpx_get_mat_col(lp: *mut glp_prob, j: ::libc::c_int,
                                ind: *mut ::libc::c_int,
                                val: *mut ::libc::c_double) -> ::libc::c_int;
    pub fn _glp_lpx_create_index(lp: *mut glp_prob) -> ();
    pub fn _glp_lpx_find_row(lp: *mut glp_prob, name: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn _glp_lpx_find_col(lp: *mut glp_prob, name: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn _glp_lpx_delete_index(lp: *mut glp_prob) -> ();
    pub fn _glp_lpx_scale_prob(lp: *mut glp_prob) -> ();
    pub fn _glp_lpx_unscale_prob(lp: *mut glp_prob) -> ();
    pub fn _glp_lpx_set_row_stat(lp: *mut glp_prob, i: ::libc::c_int,
                                 stat: ::libc::c_int) -> ();
    pub fn _glp_lpx_set_col_stat(lp: *mut glp_prob, j: ::libc::c_int,
                                 stat: ::libc::c_int) -> ();
    pub fn _glp_lpx_std_basis(lp: *mut glp_prob) -> ();
    pub fn _glp_lpx_adv_basis(lp: *mut glp_prob) -> ();
    pub fn _glp_lpx_cpx_basis(lp: *mut glp_prob) -> ();
    pub fn _glp_lpx_simplex(lp: *mut glp_prob) -> ::libc::c_int;
    pub fn _glp_lpx_exact(lp: *mut glp_prob) -> ::libc::c_int;
    pub fn _glp_lpx_get_status(lp: *mut glp_prob) -> ::libc::c_int;
    pub fn _glp_lpx_get_prim_stat(lp: *mut glp_prob) -> ::libc::c_int;
    pub fn _glp_lpx_get_dual_stat(lp: *mut glp_prob) -> ::libc::c_int;
    pub fn _glp_lpx_get_obj_val(lp: *mut glp_prob) -> ::libc::c_double;
    pub fn _glp_lpx_get_row_stat(lp: *mut glp_prob, i: ::libc::c_int)
     -> ::libc::c_int;
    pub fn _glp_lpx_get_row_prim(lp: *mut glp_prob, i: ::libc::c_int)
     -> ::libc::c_double;
    pub fn _glp_lpx_get_row_dual(lp: *mut glp_prob, i: ::libc::c_int)
     -> ::libc::c_double;
    pub fn _glp_lpx_get_row_info(lp: *mut glp_prob, i: ::libc::c_int,
                                 tagx: *mut ::libc::c_int,
                                 vx: *mut ::libc::c_double,
                                 dx: *mut ::libc::c_double) -> ();
    pub fn _glp_lpx_get_col_stat(lp: *mut glp_prob, j: ::libc::c_int)
     -> ::libc::c_int;
    pub fn _glp_lpx_get_col_prim(lp: *mut glp_prob, j: ::libc::c_int)
     -> ::libc::c_double;
    pub fn _glp_lpx_get_col_dual(lp: *mut glp_prob, j: ::libc::c_int)
     -> ::libc::c_double;
    pub fn _glp_lpx_get_col_info(lp: *mut glp_prob, j: ::libc::c_int,
                                 tagx: *mut ::libc::c_int,
                                 vx: *mut ::libc::c_double,
                                 dx: *mut ::libc::c_double) -> ();
    pub fn _glp_lpx_get_ray_info(lp: *mut glp_prob) -> ::libc::c_int;
    pub fn _glp_lpx_check_kkt(lp: *mut glp_prob, scaled: ::libc::c_int,
                              kkt: *mut LPXKKT) -> ();
    pub fn _glp_lpx_warm_up(lp: *mut glp_prob) -> ::libc::c_int;
    pub fn _glp_lpx_eval_tab_row(lp: *mut glp_prob, k: ::libc::c_int,
                                 ind: *mut ::libc::c_int,
                                 val: *mut ::libc::c_double) -> ::libc::c_int;
    pub fn _glp_lpx_eval_tab_col(lp: *mut glp_prob, k: ::libc::c_int,
                                 ind: *mut ::libc::c_int,
                                 val: *mut ::libc::c_double) -> ::libc::c_int;
    pub fn _glp_lpx_transform_row(lp: *mut glp_prob, len: ::libc::c_int,
                                  ind: *mut ::libc::c_int,
                                  val: *mut ::libc::c_double)
     -> ::libc::c_int;
    pub fn _glp_lpx_transform_col(lp: *mut glp_prob, len: ::libc::c_int,
                                  ind: *mut ::libc::c_int,
                                  val: *mut ::libc::c_double)
     -> ::libc::c_int;
    pub fn _glp_lpx_prim_ratio_test(lp: *mut glp_prob, len: ::libc::c_int,
                                    ind: *const ::libc::c_int,
                                    val: *const ::libc::c_double,
                                    how: ::libc::c_int, tol: ::libc::c_double)
     -> ::libc::c_int;
    pub fn _glp_lpx_dual_ratio_test(lp: *mut glp_prob, len: ::libc::c_int,
                                    ind: *const ::libc::c_int,
                                    val: *const ::libc::c_double,
                                    how: ::libc::c_int, tol: ::libc::c_double)
     -> ::libc::c_int;
    pub fn _glp_lpx_interior(lp: *mut glp_prob) -> ::libc::c_int;
    pub fn _glp_lpx_ipt_status(lp: *mut glp_prob) -> ::libc::c_int;
    pub fn _glp_lpx_ipt_obj_val(lp: *mut glp_prob) -> ::libc::c_double;
    pub fn _glp_lpx_ipt_row_prim(lp: *mut glp_prob, i: ::libc::c_int)
     -> ::libc::c_double;
    pub fn _glp_lpx_ipt_row_dual(lp: *mut glp_prob, i: ::libc::c_int)
     -> ::libc::c_double;
    pub fn _glp_lpx_ipt_col_prim(lp: *mut glp_prob, j: ::libc::c_int)
     -> ::libc::c_double;
    pub fn _glp_lpx_ipt_col_dual(lp: *mut glp_prob, j: ::libc::c_int)
     -> ::libc::c_double;
    pub fn _glp_lpx_set_class(lp: *mut glp_prob, klass: ::libc::c_int) -> ();
    pub fn _glp_lpx_get_class(lp: *mut glp_prob) -> ::libc::c_int;
    pub fn _glp_lpx_set_col_kind(lp: *mut glp_prob, j: ::libc::c_int,
                                 kind: ::libc::c_int) -> ();
    pub fn _glp_lpx_get_col_kind(lp: *mut glp_prob, j: ::libc::c_int)
     -> ::libc::c_int;
    pub fn _glp_lpx_get_num_int(lp: *mut glp_prob) -> ::libc::c_int;
    pub fn _glp_lpx_get_num_bin(lp: *mut glp_prob) -> ::libc::c_int;
    pub fn _glp_lpx_integer(lp: *mut glp_prob) -> ::libc::c_int;
    pub fn _glp_lpx_intopt(lp: *mut glp_prob) -> ::libc::c_int;
    pub fn _glp_lpx_mip_status(lp: *mut glp_prob) -> ::libc::c_int;
    pub fn _glp_lpx_mip_obj_val(lp: *mut glp_prob) -> ::libc::c_double;
    pub fn _glp_lpx_mip_row_val(lp: *mut glp_prob, i: ::libc::c_int)
     -> ::libc::c_double;
    pub fn _glp_lpx_mip_col_val(lp: *mut glp_prob, j: ::libc::c_int)
     -> ::libc::c_double;
    pub fn _glp_lpx_check_int(lp: *mut glp_prob, kkt: *mut LPXKKT) -> ();
    pub fn _glp_lpx_reset_parms(lp: *mut glp_prob) -> ();
    pub fn _glp_lpx_set_int_parm(lp: *mut glp_prob, parm: ::libc::c_int,
                                 val: ::libc::c_int) -> ();
    pub fn _glp_lpx_get_int_parm(lp: *mut glp_prob, parm: ::libc::c_int)
     -> ::libc::c_int;
    pub fn _glp_lpx_set_real_parm(lp: *mut glp_prob, parm: ::libc::c_int,
                                  val: ::libc::c_double) -> ();
    pub fn _glp_lpx_get_real_parm(lp: *mut glp_prob, parm: ::libc::c_int)
     -> ::libc::c_double;
    pub fn _glp_lpx_read_mps(fname: *const ::libc::c_char) -> *mut glp_prob;
    pub fn _glp_lpx_write_mps(lp: *mut glp_prob, fname: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn _glp_lpx_read_bas(lp: *mut glp_prob, fname: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn _glp_lpx_write_bas(lp: *mut glp_prob, fname: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn _glp_lpx_read_freemps(fname: *const ::libc::c_char)
     -> *mut glp_prob;
    pub fn _glp_lpx_write_freemps(lp: *mut glp_prob,
                                  fname: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn _glp_lpx_read_cpxlp(fname: *const ::libc::c_char) -> *mut glp_prob;
    pub fn _glp_lpx_write_cpxlp(lp: *mut glp_prob,
                                fname: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn _glp_lpx_read_model(model: *const ::libc::c_char,
                               data: *const ::libc::c_char,
                               output: *const ::libc::c_char)
     -> *mut glp_prob;
    pub fn _glp_lpx_print_prob(lp: *mut glp_prob,
                               fname: *const ::libc::c_char) -> ::libc::c_int;
    pub fn _glp_lpx_print_sol(lp: *mut glp_prob, fname: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn _glp_lpx_print_sens_bnds(lp: *mut glp_prob,
                                    fname: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn _glp_lpx_print_ips(lp: *mut glp_prob, fname: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn _glp_lpx_print_mip(lp: *mut glp_prob, fname: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn _glp_lpx_is_b_avail(lp: *mut glp_prob) -> ::libc::c_int;
    pub fn _glp_lpx_write_pb(lp: *mut glp_prob, fname: *const ::libc::c_char,
                             normalized: ::libc::c_int,
                             binarize: ::libc::c_int) -> ::libc::c_int;
    pub fn _glp_lpx_main(argc: ::libc::c_int,
                         argv: *mut *const ::libc::c_char) -> ::libc::c_int;
}
